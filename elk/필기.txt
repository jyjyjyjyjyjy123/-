
Elasticsearch
- https://elastic.co/kr

Elasticsearch란?
- 루씬 기반의 자바 오픈 소스 검색 엔진
- 방대한 양의 데이터를 신속하고 거의 실시간으로 저장/검색/분석할 수 있다.
- REST API를 제공한다.
- JSON 형태로 데이터 저장/조회한다.

ELK or Elastic Stack
- 엘라스틱 서치는 단독으로 사용 or ELK 스택으로 사용
- E(Elasticsearch)
- L(Logstash)
- K(Kibana)
- B(Beats)

1. Logstash/Beats
    - 역할 > Ingest
    - 다양한 소스(DB,CSV,Log..)로부터 데이터를 가져다, 조작 후 Elasticsearch에게 전달하는 역할

2. Elasticsearch
    - 역할 > Store, Search, Analyze
    - 직접 수집 데이터 or Logstash 수집 데이터 > 관리 or 조작(검색)

3. Kibana
    - 역할 > Visualize & Manage
    - Elasticsearch의 데이터를 시각화 or 편리하게 조작 기능 제공한다.
    - GUI 환경 제공


ELK 설치
    - ubuntu에서
        - elasticsearch
        $ curl -fsSL https://artifacts.elastic.co/GPG-KEY-elasticsearch |sudo gpg --dearmor -o /usr/share/keyrings/elastic.gpg
        $ echo "deb [signed-by=/usr/share/keyrings/elastic.gpg] https://artifacts.elastic.co/packages/7.x/apt stable main" | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list
        $ sudo apt-get update
        $ sudo apt-get install elasticsearch
        $ systemctl status elasticsearch
        $ sudo systemctl start elasticsearch
        $ sudo systemctl enable elasticsearch
        http://localhost:9200

        - kibana
        $ sudo apt-get install kibana
        $ sudo systemctl status kibana
        $ sudo systemctl start kibana
        http://localhost:5601

        - logstash
        $ sudo apt-get install logstash
        $ sudo systemctl status logstash

Elasticsearch 핵심 개념
1. 클러스터
    - 노드의 집합
    - 하나 이상의 노드 집합
2. 노드
    - 엘라스틱서치가 설치된 서버(컴퓨터)
3. 인덱스
    - 비슷한 특성을 가진 문서의 집합
    - 데이터 베이스 역할
4. 타입
    - 도큐먼트 집합
    - 테이블 역할
5. 도큐먼트
    - 데이터 저장단위
    - 레코드 역할(***)
    - JSON 포맷
6. 샤드&리플리카
    - 분산 환경을 위한 요소

RDBMS    vs    elasticsearch

Scheme          Mapping
Database        index(***)
Table           Type
Row             Document(***)
Column          Field
SQL             QueryDSL


elasticsearch REST API

RDB     vs  Elasticsearch
SELECT      GET
update      PUT/POST
INSERT      PUT/POST
DELETE      DELETE

SQL > select * from address where id = 1;
ES > curl -X GET "localhost:9200/address/_doc/1"

REST API를 사용하기 위한 도구
1. curl
2. Postman, Insomnia 등 REST Client
3. Kibana > Dev Tools


Index(DB, 테이블), Document(데이터(행))

Index CRUD
- Index 조작

Index 생선 전 > 이미 존재하는 지 확인 > 조회
$ curl -X GET "localhost:9200/<인덱스명>"
$ curl -X GET "localhost:9200/member"
$ curl -X GET "localhost:9200/member?pretty"

Index 생성하기
$ curl -X PUT "localhost:9200/member?pretty"

Index 삭제하기
$ curl -X DELETE "localhost:9200/member?pretty"



Document CRUD 
- Document 조작
- Document == 레코드 1줄

$ curl -X PUT "localhost:9200/member"

Document 추가하기
- PUT
- 데이터 입력하기

$ curl -X PUT "<서버주소>:<포트번호>/<인덱스>/_doc/<도큐먼트ID>" -H "Content-Type: application/json" -d "데이터"
$ curl -X PUT "localhost:9200/member/_doc/1" -H "Content-Type: application/json" -d '{"name": "홍길동", "age": 20}'



elasticsearch, kibana 실행 중인지 확인
$ systemctl status elasticsearch > Active: active (running)
$ systemctl status kibana > Active: active (running)

$ sudo systemctl start 패키지명
$ sudo systemctl stop 패키지명
$ sudo systemctl status 패키지명
$ sudo systemctl restart 패키지명

브라우저 
- http://localhost:9200 > elasticsearch
- http://localhost:5601 > kibana




elasticsearch
- 구조: JSON을 저장하는 데이터베이스
- 용도: 검색 엔진

데이터 저장 단위 > Document == JSON 형태

[오라클]
1. 테이블 선언
    - 컬럼 정의(이름(varchar2), 나이(number), 주소(varchar2))
2. insert
    - 레코드 추가

[Elasticsearch]
1. Index(Type) 선언
    - 저장 규칙(x) > 강제성(x)
2. 데이터 추가(JSON)
{
  "name": "홍길동",
  "age": 20,
  "address": "서울시"
}
{
  "name": "아무개",
  "age": 25,
  "address": "인천시"
}
{
  "nick": "호호호",
  "gender": "f"
}



Elasticsearch 검색하기
- 관계형 데이터베이스에 비해서 다양하고/효과적인 검색 기능을 제공한다.
- 특징 > 풀 텍스트 검색(Full Text Search)을 지원한다.
- 검색 > QueryDSL(Query Domain Sepacific Language)

- 검색은 Index를 대상으로 수행된다.
- GET <인덱스명>/_search > match_all 검색이 수행된다.

검색 방식
- URI 검색
- JSON Data Body 검색 > 주로 사용

JSON Data Body 검색
- 데이터 본문 검색
- 검색할 쿼리를 전송할 데이터 본문에 넣어서 입력하는 방식

- 가장 많이 사용하는 쿼리 > match 쿼리
GET <도큐먼트>/_search
{
    "query": {
        "match": {
            "<필드명>": "<검색어>"
        }
    }
}




멀티테넌시, Multitenancy
- 여러개의 Index를 한번에 묶어서 검색할 수 있는 기능
- 프로그램의 로그 파일 분석 > logs-2023-01, logs-2023-02, logs-2023-03 ...

GET logs-2023-01,logs-2023-02,logs-2023-03/_search
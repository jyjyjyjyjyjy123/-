이전 인증 방식 > 세션(쿠키) 기반 + 직접 처리

스프링 시큐리티

프로젝트 설정

1. 일괄 설정
	- pom.xml
	- web.xml
	- root-context.xml
	- log4j.xml
	- log4jdbc.log4j2.properties

2. WEB-INF > lib > ojdbc6.jar
	- Build Path 추가
	
3. pom.xml
	- 시큐리티 의존성 4개 추가
	
4. 패키지
	- com.test.controller	
	- com.test.persistence	
	- com.test.domain
	- com.test.mapper
	- com.test.security		

5. servlet-context.xml
	- 스캔 추가
			- com.test.controller	
			- com.test.persistence
			- com.test.security	
			
6. security-context.xml
	- 파일 생성
	- /WEB-INF/spring/security-context.xml
	- 스프링 시큐리티의 전반적인 설정
	- nameSpaces > security 선택
	- '-5.0' 삭제
	
7. web.xml
	- 스프링 시큐리티가 동작할 수 있게 필터 추가
	
8. 실행
	- 에러 > No bean named 'springSecurityFilterChain' available
	- 못찾아서.. 
	
8.1 web.xml > security-context.xml 위치 추가
8.2 security-context.xml > 기본 구문 작성
8.3 다시 실행


9. 기본적인 URI 설계
	- /index.do > 초기 페이지(모두 접근)
	- /member/member.do > 회원 페이지(회원, 관리자 접근)
	- /admin/admin.do > 관리자 페이지(관리자만 접근)
	
9.1 파일 생성
	- com.test.controller 	> TestController.java
	- views 				> index.jsp
			> member 		> member.jsp
			> admin	 		> admin.jsp
			> inc	 		> header.jsp
			
9.2 실행
	- 정상 실행
	
	
10. 로그인
	- security-context.xml 수정

10.1 pattern 속성
	- 접근할 URI
	
10.2 access 속성
	- 표현식
	- 접근 권한

10.3 실행
	- index.do > 접근 성공
	- member.do > 접근 실패 
		> http://localhost:8090/spring/login
		> 빌트인 로그인 페이지로 이동(권한 없어서)
		
		
11. 단순 로그인
	- 직접 구현(x)
	- 내장 구현(o)
	
	
11.1 주의점(***)
	- 일반 시스템(id) == 스프링 시큐리티(username)
	
11.2 sercurity-context.xml 수정
	- 계정 추가
	
11.3 로그아웃
	- 나중에 만듬
	- 개발자 도구 > application > Cookies > 주소 > JSESSIONID 삭제
	
12. 여러 권한을 가지는 사용자
	- 관리자 > 일반 회원 권환 + 관리자 권한
	
12.1 security-context.xml

12.2 실행
	- hong 로그인
		- member.do > 성공
		- admin.do > 실패 > 403
		
13. 403 페이지 구현
	- com.test.controller > AuthController.java		
	- view > auth > accesserror.jsp

14. 로그인 페이지 구현
	- 커스텀 로그인 페이지
	- 접근 제한(403) 페이지처럼 직접 특성 URI를 지정할 수 있다.
	
14.1 security-context.xml

14.2 
	- AuthController.java
	- view > auth > mylogin.jsp
		
14.3 CSRF, Cross-site request forgery
	- 해킹 기법
	- 요청 정보를 다른 사이트에서 보내서 위조하는 기법..
	- 스프링 시큐리티 > CSRF 기법
	- 모든 POST 요청을 할 때 > 위조가 되지 않았다는 사실을 증명!!
	
15. 로그인 성공 이후 처리
	- 정해진 URI로 이동하기
	- 일반 회원 > member.do 이동
	- 관리자 > admin.do 이동
	
15.1
	- com.test.security > CustomLoginSuccessHandler.java
	
15.2 security-context.xml


16. 로그아웃 처리
	- 로그인처럼 특정한 URI를 지정하고. 로그아웃을 처리 후 직접 로직을 처리하는 핸들러를 등록한다.
	
16.1 security-context.xml

16.2 AuthController.java

16.3 view > auth > mylogout.jsp


17. 오라클 연동 + 계정
- SecurityYest > script.sql
	
		
18. 회원 가입 구현 전 > 임시 계정 만들기
	- 암호를 인코딩한 상태로 저장하기 위해서..
	- 테스트용
	- src/test/java > com.test.spring > MemberTest.java
		
18.1 암호 인코딩 객체
	- security-context.xml
	- BCryptPasswordEncoder
		- 블로피시(blowfish) 해시 함수 기반
		- 암호화는 가능, 복호화는 불가능
	- src/main/java > com.test.mapper > TestMapper.java(I)
	- src/main/resources > com > test > mapper > TestMapper.xml
	- com.test.domain 	> MemberDTO.java
						> AuthDTO.java
						

19. 회원 가입 페이지
	- com.test.controller > MemberController.java
	- com.test.mapper > MemberMapper.java(I)
	- com > test > mpper > MemberMapper.xml
	- views > auth > register.jsp
	

20. 커스텀 UserDetailsService 사용
	- DB 사용 로그인 후 처리
	- com.test.security > CustomUserDetailsService.java
	- com.test.domain 	> CustomUser.java
		
		
		
		
		
		